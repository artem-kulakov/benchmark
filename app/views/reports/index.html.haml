-# 'New report' button
= link_to 'New report', new_report_path(industry: @industry.id, period: @period.id), class: "btn btn-success pull-right"


-# Industry and period selectors
= form_tag reports_path, method: 'get', class: 'selector' do
  %ul.list-inline
    %li= select_tag :industry, options_from_collection_for_select(@industries, :id, :title, @industry.id), onchange: 'this.form.submit()', class: 'form-control'
    %li= select_tag :period, options_from_collection_for_select(@periods, :id, :title, @period.id), onchange: 'this.form.submit()', class: 'form-control'
    %li= country_select nil, :country, {only: Company.pluck(:country).uniq, include_blank: 'All countries', selected: @country}, onchange: 'this.form.submit()', class: 'form-control'
    - if FxRate.any?
      %li= select_tag :currency, options_from_collection_for_select(@currencies, :id, :title, @currency), onchange: 'this.form.submit()', class: 'form-control'

  = submit_tag 'submit'
  = javascript_tag "$('.selector input').hide()"


-# Reports table
%table.table

  -# Table header
  %tr
    %th Company
    - @indicators.each do |indicator|
      %th.text-right= indicator.title
    // %th Maker
    // %th Checker
    %th.text-center Accounting standard
    %th.text-center Check
    %th.text-center Edit
    %th.text-center Delete

  -# Reports list
  - @reports.each do |report|
    %tr
      %td= report.company_title
      
      / - indicators_values = Hash[*report.values.collect {|it| [it.indicator_id.to_s, it.value]}.flatten]
      
      - @indicators.each do |indicator|
        / - if indicator.formula
        /   %td= eval(indicator.formula.notation.gsub(/(?<=\[)(\d+)(?=\])|(?:[\[\]])/, indicators_values))
        / - else
        /   %td= report.values.where(indicator_id: indicator.id).pluck(:value).pop
        
        - # FX conversion
        - if report.indicator_value(indicator)
          - original_value = report.indicator_value(indicator)
          - original_currency = report.original_currency(indicator)
          - original_to_usd_rate = FxRate.where(day_id: @period.day.id, currency_id: original_currency).pluck(:rate).pop
          - usd_to_target_rate = FxRate.where(day_id: @period.day.id, currency_id: @currency).pluck(:rate).pop
          - result = original_value / original_to_usd_rate * usd_to_target_rate
          %td.text-right= number_with_precision(result, precision: 0, delimiter: ',')
        - else
          %td
      
      // -# Maker (highlighted if he is user)
      // - if report.author_id == current_user.id
      //   %td.text-primary= "#{report.author_name}, #{report.maker_rating}"
      // - else
      //   %td= "#{report.author_name}, #{report.maker_rating}"
      
      // -# Checker (highlighted if he is user)
      // - unless report.best_version.checker.nil?
      //   - if report.checker_id == current_user.id
      //     %td.text-primary= report.checker_name
      //   - else
      //     %td= report.checker_name
      // - else
      //   %td -
      
      
      - # Accounting standard
      %td.text-center= report.accounting_standard_title
      
      
      -# 'Check' button
      - path = check_path(user: report.maker_id, completeness: report.completeness)
      
      -# 'Check' glyphicon
      - if report.checker_id.nil?
        - glyphicon = 'glyphicon-unchecked'
      - else
        - glyphicon = 'glyphicon-check'
      
      -# td
      %td.text-center
        -# Disabled link if current user is maker or checker of report or checker's rating is not high enough for check
        // - if report.maker_id == current_user.id || report.checker_id == current_user.id || (report.rating + (1000 - report.rating) * 0.1 * report.completeness.to_f > current_user.rating)
        %span{ class: "glyphicon #{glyphicon} text-muted" }
        // - else
        //   = link_to path do
        //     %span{ class: "glyphicon #{glyphicon}" }

      
      -# 'Edit' button
      - path = edit_report_path(report)
      %td.text-center
        // - if report.maker_id == current_user.id || report.rating + (1000 - report.rating) * 0.1 * report.completeness.to_f < current_user.rating
        =link_to path do
          %span.glyphicon.glyphicon-edit
        // - else
        //   %span.glyphicon.glyphicon-edit.text-muted
      
      
      - # 'Delete' button
      %td.text-center= link_to 'Delete', report, :method => :delete, :data => { :confirm => 'Are you sure?' }
      
      
-# 'New indicator/industry/etc' buttons
%ul.list-inline
  %li= link_to 'New industry', new_industry_path, class: 'btn btn-primary btn-sm'
  %li= link_to 'New company', new_company_path(industry: @industry.id), class: 'btn btn-primary btn-sm'
  %li= link_to "New indicator", new_indicator_path, class: 'btn btn-primary btn-sm'
  %li= link_to 'New period', new_period_path, class: 'btn btn-primary btn-sm'




- # Insert list of currencies to DB
/https://openexchangerates.org/api/historical/2014-12-31.json?app_id=5b50e8cb7f9346a885b00d1a274b2b89
/ - require 'open-uri'
/ - string = open('https://openexchangerates.org/api/currencies.json', {ssl_verify_mode: OpenSSL::SSL::VERIFY_NONE}).read
/ - hash = JSON.parse string
/ - hash.each do |item|
/   - foo = Currency.new
/   - foo.code = item.first
/   - foo.title = item.last
/   - foo.save


- # Insert FX rates to DB
// %p= Day.all.inspect

/ - FxRate.all.each do |item|
/   %p= item.rate

/ %p= FxRate.all.length

/ - Day.delete_all
/ - FxRate.delete_all


- # Save json to file
// - string = open('https://openexchangerates.org/api/historical/2014-12-31.json?app_id=5b50e8cb7f9346a885b00d1a274b2b89', {ssl_verify_mode: OpenSSL::SSL::VERIFY_NONE}).read
// - File.open("/home/rtmklkv/apps/benchmark/test.json", "w") { |file| file.write string }


- # Get currencies' IDs
/ - ids = Hash[Currency.all.pluck(:code, :id)]

/ - # Read JSON
/ - string = open(Rails.root + 'test.json').read
/ - json = JSON.parse string

/ - # Create day
/ - day = '2014-12-31'
/ - bar = Day.new
/ - bar.day = day

/ - # Create rates
/ - json['rates'].each do |code, rate|
/   - foo = bar.fx_rates.new
/   - foo.currency_id = ids[code]
/   - foo.rate = rate

/ - # Save day and rates
/ - bar.save


- # Temp
/ - FxRate.all.each do |item|
/   %p= item.inspect

/ - Day.all.each do |item|
/   %p= item.inspect

/ - Period.all.each do |item|
/   %p= item.inspect


- # Save css to file
// - string = open('https://bootswatch.com/cyborg/bootstrap.min.css', {ssl_verify_mode: OpenSSL::SSL::VERIFY_NONE}).read
/- File.open(Rails.root + 'bootstrap.min.css', "w") { |file| file.write string }
